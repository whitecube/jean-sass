/*
      MAIN MIXIN
      Handcrafted By WhiteCube.
      ---------------------------

      Shapes, positions and sets a rotation to pseudo-element
      in order to make a leaning border (with a background-image
      if you want to).
      The anchor point will be positionned exactly where you
      want it, even if the pseudo-element's anchor point is
      outside the parent-element.
      Use this mixin along with your other styling rules inside
      your pseudo-element in order to make something beautiful.

      -----

      @include kaduk( $position, $degrees, $width )

      $position: string ('bottom-right'|'bottom-left'|'top-right'|'top-left');
      $degrees: int (with 'deg' unit)
      $width: int (with css width unit. Width of pseudo-element)

      -----

      # EXAMPLE - TEST IT
      ---------------------------
      In order to truly understand what this does,
      test this code.

      ## HTML
      -------

      <div class="kaduk-test"><p>Some content</p></div>

      ## SCSS
      -------

      .kaduk-test{
            position: relative;
            width: 400px;
            height: 200px;
            background: #000;
            &:before{
                  @include kaduk('bottom-right', -3.5deg, 200%);
                  background: rgba(#c8c8c8, 0.8);
            }
      }


      # FUNCTIONS
      ---------------------------
*/

@use "sass:math";

@function getKadukRadians( $i ){
      @return rmUnit($i) * math.div(pi(), 180);
}

@function getKadukValue( $iAngle, $iAdjacentLength ) {
      @return ( tan(getKadukRadians($iAngle)) * rmUnit($iAdjacentLength) );
}

@function getKadukNegative( $val ) {
      @return ( $val * -1 );
}

@function getKadukUnit( $val ) {
      @return ($val - ($val - 1));
}

/*
      # MIXINS
      ---------------------------
*/

@mixin getKadukPosition($position, $offset) {
      @if $position == 'bottom-right' {
            bottom: 0;
            right: -($offset);
            @include apply-origin(100% 100%, false);
      }
      @else if $position == 'bottom-left'{
            bottom: 0;
            left: -($offset);
            @include apply-origin(0 100%, false);
      }
      @else if $position == 'top-right'{
            top: 0;
            right: -($offset);
            @include apply-origin(100% 0, false);
      }
      @else if $position == 'top-left'{
            top: 0;
            left: -($offset);
            @include apply-origin(0 0, false);
      }
}

@mixin getKadukOffset($position, $degrees, $iLength, $unit) {
      @if $position == 'bottom-right' { 
            margin-bottom: getKadukNegative( getKadukValue($degrees, $iLength) ) * $unit;
      }
      @else if $position == 'bottom-left'{ 
            margin-bottom: getKadukValue($degrees, $iLength) * $unit;
      }
      @else if $position == 'top-right'{ 
            margin-top: getKadukValue($degrees, $iLength) * $unit;
      }
      @else if $position == 'top-left'{ 
            margin-top: getKadukNegative( getKadukValue($degrees, $iLength) ) * $unit;
      }
}

@mixin kaduk( $position, $degrees, $width ){
      content: "";
      display: block;
      position: absolute;
      height: 0;
      width: $width;
      padding-bottom: $width;
      @include getKadukPosition($position, ($width * 0.25));
      @include rotateZ($degrees);
      @include getKadukOffset($position, $degrees, ($width * 0.25), getKadukUnit($width));
}